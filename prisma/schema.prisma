generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Farm {
  sbi     String  @id
  name    String
  startAg DateTime?
  endAg   DateTime?
  renewAg DateTime?
  parcels LandParcel[]
}

model Evidence {
  id              String            @id @default(cuid())
  date            DateTime          @default(now())
  title           String
  notes           String            @default("")
  fileUrl         String
  task            Task?             @relation(fields: [taskId], references: [id], onDelete: SetNull)
  taskId          String?
  optionEvidences OptionEvidence[]
  required        RequiredEvidence?
}

model RequiredEvidence {
  id       String    @id @default(cuid())
  title    String
  desc     String
  evidence Evidence? @relation(fields: [evId], references: [id], onDelete: SetNull)
  evId     String?   @unique
  task     Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId   String
}

model Action {
  code      String   @id
  name      String
  govUrl    String
  options   Option[]
  tasks     Task[]
}

model LandParcel {
  id      String   @id
  name    String
  options Option[]
  sbi     String
  feature Json?
  farm    Farm     @relation(fields: [sbi], references: [sbi], onDelete: Cascade)
}

model Task {
  id          String    @default(cuid()) @id
  deadline    DateTime
  title       String
  description String
  completed   Boolean   @default(false)
  options     OptionTask[]
  evidences   Evidence[]
  actionCode  String
  action      Action  @relation(fields: [actionCode], references: [code], onDelete: Cascade)
  requiredEvidences RequiredEvidence[]
}

model OptionTask {
  actionCode  String 
  parcelId    String
  option      Option    @relation(fields: [actionCode, parcelId], references: [actionCode, parcelId], onDelete: Cascade)
  taskId      String   
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  @@id([actionCode, parcelId, taskId])
}

model Option {
  action          Action           @relation(fields: [actionCode], references: [code], onDelete: Cascade)
  actionCode      String
  parcel          LandParcel       @relation(fields: [parcelId], references: [id], onDelete: Cascade)
  parcelId        String
  tasks           OptionTask[]
  optionEvidences OptionEvidence[]

  @@id([actionCode, parcelId])
}

// One piece of evidence may be for many options
// These options need not have the same action
model OptionEvidence {
  evidence Evidence @relation(fields: [evId], references: [id], onDelete: Cascade)
  evId     String
  option   Option   @relation(fields: [actCode, parcelId], references: [actionCode, parcelId], onDelete: Cascade)
  actCode  String
  parcelId String

  @@id([evId, actCode, parcelId])
}
